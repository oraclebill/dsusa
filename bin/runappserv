#!/usr/bin/python 

import sys
import subprocess
import os.path as path
from optparse import OptionParser

parser = OptionParser()
parser.add_option('-k', '--kill', action='store_const', const='kill', dest='action', help='kill a running appserver')
parser.add_option('-r', '--restart', action='store_const', const='restart', dest='action', help='restart a running appserver')

opts, a = parser.parse_args(sys.argv[1:])
if a:
  site = a[0]
else: 
  site = 'website'

if not opts.action:
  opts.action = 'start'

(root, dir) = path.split(path.dirname(path.abspath(__file__)))
project = path.basename(root)

if not 'bin' == dir:  
  print 'Error: script directory "%s" instead of "bin"' % dir
  exit(-1)
if not path.exists(path.join(root,'var')):
  print 'Error: no "var" directory found as child of "%s"' % root
  exit(-1)

if site == 'website':
  site_path=path.join(root,'website', 'manage.py')
else:
  site_path=path.join(root,'sites', site, 'manage.py')

if not path.exists(path.join(site_path)):
  print 'Error: site not found: %s' % site_path
  exit(-1)

socket=path.join(root,'var',site, 'run', '%s.sock' % site)
pidfile=path.join(root,'var',site, 'run', '%s.pid' % site)
errlog=path.join(root,'var',site, 'log', '%s-errors.log' % site)

print '*** Executing %s for app %s at %s' % (opts.action, site, socket)
if path.exists(pidfile):
   print 'found process file %s' % pidfile
   if opts.action in ['kill', 'restart']:
      print '...shutting down %s' % site
      pid=open(pidfile).read().strip()
      subprocess.call(['kill', pid])
      subprocess.call(['rm', pidfile])
   else:
      print "server already running at %s - try --restart" % pidfile
      exit(-3)

elif opts.action in ['kill', 'restart']:
  print 'no process file found!'

if opts.action in ['start', 'restart']:
  print 'Starting %s' % site
  params=[ site_path,
     'runfcgi', 
     'method=prefork',
     'socket=%s' % socket,
     'pidfile=%s' % pidfile,
     'errlog=%s' % errlog,
     'maxchildren=2']
  #print 'running %s' % params
  subprocess.call(params)
  subprocess.call(['chmod', '666', socket])
  print 'process running on local socket %s, process id %s' % (socket, open(pidfile).read().strip())
